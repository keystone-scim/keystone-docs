{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Keystone Welcome to the official Keystone Documentation. What's Keystone? Keystone is a fully containerized lightweight SCIM 2.0 API implementation. Whether you're using one of the prominent cloud identity managers such as Azure Active Directory, Okta, Auth0, etc., or another identity provider that supports automatic provisioning with SCIM 2.0, you can use Keystone to quickly store the state of directory in a data store . Supported Data Store As Keystone is an entirely stateless workload, it expects you to bring your own storage layer, and it'll take care of the nitty-gritty details, such as schema and tables creation. All you have to do is provision a supported data store in a network location that your Keystone container can reach. Keystone currently supports the following data stores: Azure Cosmos DB PostgreSQL (version 10 or higher) MongoDB (version 3.6 or higher) MySQL (version 5.7.8 or higher) An in-memory store for testing purposes only . Keystone is slated to support the following data stores, in descending order of implementation priority: Azure AD B2C Tenants Redis Microsoft SQL AWS DynamoDB Supported Authentication Methods While the SCIM 2.0 protocol itself doesn't define SCIM-specific scheme for authentication , most prominent identity managers allow you to specify a bearer token that they'll use in the Authorization HTTP header in their requests against SCIM 2.0 APIs. Keystone currently allows you to specify that secret bearer token in two places: In an Azure Key Vault secret. In an environment variable ( AUTHENTICATION_SECRET ). Read more on how to configure Keystone to use either authentication methods.","title":"Welcome"},{"location":"#welcome-to-keystone","text":"Welcome to the official Keystone Documentation.","title":"Welcome to Keystone"},{"location":"#whats-keystone","text":"Keystone is a fully containerized lightweight SCIM 2.0 API implementation. Whether you're using one of the prominent cloud identity managers such as Azure Active Directory, Okta, Auth0, etc., or another identity provider that supports automatic provisioning with SCIM 2.0, you can use Keystone to quickly store the state of directory in a data store .","title":"What's Keystone?"},{"location":"#supported-data-store","text":"As Keystone is an entirely stateless workload, it expects you to bring your own storage layer, and it'll take care of the nitty-gritty details, such as schema and tables creation. All you have to do is provision a supported data store in a network location that your Keystone container can reach. Keystone currently supports the following data stores: Azure Cosmos DB PostgreSQL (version 10 or higher) MongoDB (version 3.6 or higher) MySQL (version 5.7.8 or higher) An in-memory store for testing purposes only . Keystone is slated to support the following data stores, in descending order of implementation priority: Azure AD B2C Tenants Redis Microsoft SQL AWS DynamoDB","title":"Supported Data Store"},{"location":"#supported-authentication-methods","text":"While the SCIM 2.0 protocol itself doesn't define SCIM-specific scheme for authentication , most prominent identity managers allow you to specify a bearer token that they'll use in the Authorization HTTP header in their requests against SCIM 2.0 APIs. Keystone currently allows you to specify that secret bearer token in two places: In an Azure Key Vault secret. In an environment variable ( AUTHENTICATION_SECRET ). Read more on how to configure Keystone to use either authentication methods.","title":"Supported Authentication Methods"},{"location":"azure-cosmos-db/","text":"Azure Cosmos DB Store Overview You can configure Keystone to point to an Azure Cosmos DB service. Keystone will attempt to create its a database container and tables upon startup if they do not yet exist. Please read further to learn how to configure Keystone with an Azure Cosmos DB store. Prerequisites You'll need to ensure the following criteria are met: Keystone can reach Cosmos DB : It may go without saying, but your Cosmos DB account will have to be eachable by your Keystone deployment. If your Cosmos DB account is gated in a VNet, ensure network constraints allow Keystone to work with your Cosmos DB account. Authentication Keystone can authenticate with Cosmos DB in one of the following ways: Managed Identity (highly recommended): In case you're deploying Keystone to a container runtime environment in Azure (e.g., Azure Kubernetes Service , Azure Container Apps ) it is highly recommended to set up a managed identity for the service running the Keystone container(s), and assign RBAC roles that allow it to interact with your Cosmos DB service. Read more on Azure Managed Identities . Account Keys: Cosmos DB allows you to generate account keys with which you can make authenticated Cosmos DB requests. If you opt to use this authentication method, it's recommended that you rotate the Cosmos DB account keys often. Read more on Cosmos DB Account Keys . Example The following YAML file and environment variables is a valid way to configure Keystone to point to your Cosmos DB account as its data store, using an Azure Managed Identity (assuming Keystone runs on azure, e.g., on AKS ). Create a file and call it keystone_config.yaml : store : cosmos : account_uri : https://myscim2pool.documents.azure.com:443/ Run the container, while bind-mounting the configuration file as a volume, along with environment variables for secrets: docker run -it \\ -p 5001 :5001 \\ --mount type = bind,source = \" $( pwd ) \" /keystone_config.yaml,target = /etc/keystone_config.yaml -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e CONFIG_PATH = /etc/keystone_config.yaml ghcr.io/keystone-scim/keystone:latest Running on Azure? Use Azure Key Vault If you're using Azure, you can leverage Azure Key Vault to store Keystone 's bearer token. If you set up a managed identity for Keystone to consume secrets from an Azure Key Vault, your configuration could look like so: store : cosmos : account_uri : https://myscim2pool.documents.azure.com:443/ authentication : akv : vault_name : my-akv-name secret_name : my-bearer-token-secret-name If you're using AKV, don't forget to omit the AUTHENTICATION_SECRET environment variable from the container.","title":"Cosmos DB Store"},{"location":"azure-cosmos-db/#azure-cosmos-db-store","text":"","title":"Azure Cosmos DB Store"},{"location":"azure-cosmos-db/#overview","text":"You can configure Keystone to point to an Azure Cosmos DB service. Keystone will attempt to create its a database container and tables upon startup if they do not yet exist. Please read further to learn how to configure Keystone with an Azure Cosmos DB store.","title":"Overview"},{"location":"azure-cosmos-db/#prerequisites","text":"You'll need to ensure the following criteria are met: Keystone can reach Cosmos DB : It may go without saying, but your Cosmos DB account will have to be eachable by your Keystone deployment. If your Cosmos DB account is gated in a VNet, ensure network constraints allow Keystone to work with your Cosmos DB account.","title":"Prerequisites"},{"location":"azure-cosmos-db/#authentication","text":"Keystone can authenticate with Cosmos DB in one of the following ways: Managed Identity (highly recommended): In case you're deploying Keystone to a container runtime environment in Azure (e.g., Azure Kubernetes Service , Azure Container Apps ) it is highly recommended to set up a managed identity for the service running the Keystone container(s), and assign RBAC roles that allow it to interact with your Cosmos DB service. Read more on Azure Managed Identities . Account Keys: Cosmos DB allows you to generate account keys with which you can make authenticated Cosmos DB requests. If you opt to use this authentication method, it's recommended that you rotate the Cosmos DB account keys often. Read more on Cosmos DB Account Keys .","title":"Authentication"},{"location":"azure-cosmos-db/#example","text":"The following YAML file and environment variables is a valid way to configure Keystone to point to your Cosmos DB account as its data store, using an Azure Managed Identity (assuming Keystone runs on azure, e.g., on AKS ). Create a file and call it keystone_config.yaml : store : cosmos : account_uri : https://myscim2pool.documents.azure.com:443/ Run the container, while bind-mounting the configuration file as a volume, along with environment variables for secrets: docker run -it \\ -p 5001 :5001 \\ --mount type = bind,source = \" $( pwd ) \" /keystone_config.yaml,target = /etc/keystone_config.yaml -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e CONFIG_PATH = /etc/keystone_config.yaml ghcr.io/keystone-scim/keystone:latest Running on Azure? Use Azure Key Vault If you're using Azure, you can leverage Azure Key Vault to store Keystone 's bearer token. If you set up a managed identity for Keystone to consume secrets from an Azure Key Vault, your configuration could look like so: store : cosmos : account_uri : https://myscim2pool.documents.azure.com:443/ authentication : akv : vault_name : my-akv-name secret_name : my-bearer-token-secret-name If you're using AKV, don't forget to omit the AUTHENTICATION_SECRET environment variable from the container.","title":"Example"},{"location":"configuration/","text":"Configuring a Keystone Container Read below to understand how you can configure a Keystone container based on your needs. Before You Begin Choose How to Confiugre the Container Keystone can be configured in one of two ways: YAML File : A YAML configuration file mounted as a volume onto the container. The path to your configuration YAML file needs to be specified in the CONFIG_PATH environment variable. Environment Variables : All of the configuration keys can be represented with environment variables. You can configure Keystone with either of the two or with a combination of the two, but it is recommended to avoid storing secrets in a YAML file. Instead, secrets should be passed to the container using environment variables. Configuration Checklist Choose your storage: Keystone currently allows you to use one of the following storage layers: Azure Cosmos DB PostgreSQL (version 10 or higher) MongoDB (version 3.6 or higher) MySQL (version 5.7.8 or higher) An in-memory store for testing purposes only . Choose the token retrieval method: Keystone currently allows you to specify that secret bearer token in two places: In an Azure Key Vault secret. In a configuration value ( AUTHENTICATION_SECRET environment variable). Configuration Reference Key Description Type Default store.type Storage type. Supported values: PostgreSQL , CosmosDB , InMemory str InMemory store.pg.host PostgeSQL server's hostname, if using a PostgeSQL store str localhost store.pg.port Port to use, if using a PostgeSQL store int 5432 store.pg.ssl_mode Connection SSL mode, if using a PostgeSQL store str require store.pg.username Username for authentication, if using a PostgeSQL store str - store.pg.password Password for authentication, if using a PostgeSQL store str - store.pg.database The PostgreSQL database name, if using a PostgeSQL store str postgres store.pg.schema The PG schema, if using a PostgeSQL store str public store.mysql.host MySQL server's hostname, if using a MySQL store str localhost store.mysql.port Port to use, if using a MySQL store int 3306 store.mysql.ssl Connection SSL mode, if using a MySQL store str require store.mysql.username Username for authentication, if using a MySQL store str - store.mysql.password Password for authentication, if using a MySQL store str - store.mysql.database The MySQL database name, if using a MySQL store str mysql store.cosmos.tenant_id Azure Tenant ID, if using a Cosmos DB store with Client Secret Credentials auth. str - store.cosmos.client_id Azure Client ID, if using a Cosmos DB store with Client Secret Credentials auth. str - store.cosmos.client_secret Azure Client Secret, if using a Cosmos DB store with Client Secret Credentials auth. str - store.cosmos.account_uri Cosmos Account URI, if using a Cosmos DB store str - store.cosmos.account_key Cosmos DB account key, if using a Cosmos DB store with Account Key auth. str - store.cosmos.db_name Cosmos DB database name, if using a Cosmos DB store str scim_2_identity_pool store.mongo.host MongoDB server hostname, if using a MongoDB store. str - store.mongo.port Port to use, if using a MongoDB store. int 27017 store.mongo.username Username for authentication, if using a MongoDB store. str - store.mongo.password Password for authentication, if using a MongoDB store. str - store.mongo.tls TLS mode, if using a MongoDB store. bool true store.mongo.replica_set Cosmos DB Replica Set, if using a Cosmos DB store. str - store.mongo.database Database name, if using a Cosmos DB store. str scim2Db store.mongo.dsn Cosmos DB DSN, ignoring all other connection params (except store.mongo.database ) str - authentication.secret Plain secret bearer token str - authentication.akv.vault_name AKV name, if bearer token is stored in AKV. str - authentication.akv.secret_name AKV secret name, if bearer token is stored in AKV. str scim-2-api-token authentication.akv.credentials_client Credentials client type, if bearer token is stored in AKV. str default authentication.akv.force_create Try to create an AKV secret on startup, if bearer token to be stored in AKV. bool false","title":"Configuration Reference"},{"location":"configuration/#configuring-a-keystone-container","text":"Read below to understand how you can configure a Keystone container based on your needs.","title":"Configuring a Keystone Container"},{"location":"configuration/#before-you-begin","text":"","title":"Before You Begin"},{"location":"configuration/#choose-how-to-confiugre-the-container","text":"Keystone can be configured in one of two ways: YAML File : A YAML configuration file mounted as a volume onto the container. The path to your configuration YAML file needs to be specified in the CONFIG_PATH environment variable. Environment Variables : All of the configuration keys can be represented with environment variables. You can configure Keystone with either of the two or with a combination of the two, but it is recommended to avoid storing secrets in a YAML file. Instead, secrets should be passed to the container using environment variables.","title":"Choose How to Confiugre the Container"},{"location":"configuration/#configuration-checklist","text":"Choose your storage: Keystone currently allows you to use one of the following storage layers: Azure Cosmos DB PostgreSQL (version 10 or higher) MongoDB (version 3.6 or higher) MySQL (version 5.7.8 or higher) An in-memory store for testing purposes only . Choose the token retrieval method: Keystone currently allows you to specify that secret bearer token in two places: In an Azure Key Vault secret. In a configuration value ( AUTHENTICATION_SECRET environment variable).","title":"Configuration Checklist"},{"location":"configuration/#configuration-reference","text":"Key Description Type Default store.type Storage type. Supported values: PostgreSQL , CosmosDB , InMemory str InMemory store.pg.host PostgeSQL server's hostname, if using a PostgeSQL store str localhost store.pg.port Port to use, if using a PostgeSQL store int 5432 store.pg.ssl_mode Connection SSL mode, if using a PostgeSQL store str require store.pg.username Username for authentication, if using a PostgeSQL store str - store.pg.password Password for authentication, if using a PostgeSQL store str - store.pg.database The PostgreSQL database name, if using a PostgeSQL store str postgres store.pg.schema The PG schema, if using a PostgeSQL store str public store.mysql.host MySQL server's hostname, if using a MySQL store str localhost store.mysql.port Port to use, if using a MySQL store int 3306 store.mysql.ssl Connection SSL mode, if using a MySQL store str require store.mysql.username Username for authentication, if using a MySQL store str - store.mysql.password Password for authentication, if using a MySQL store str - store.mysql.database The MySQL database name, if using a MySQL store str mysql store.cosmos.tenant_id Azure Tenant ID, if using a Cosmos DB store with Client Secret Credentials auth. str - store.cosmos.client_id Azure Client ID, if using a Cosmos DB store with Client Secret Credentials auth. str - store.cosmos.client_secret Azure Client Secret, if using a Cosmos DB store with Client Secret Credentials auth. str - store.cosmos.account_uri Cosmos Account URI, if using a Cosmos DB store str - store.cosmos.account_key Cosmos DB account key, if using a Cosmos DB store with Account Key auth. str - store.cosmos.db_name Cosmos DB database name, if using a Cosmos DB store str scim_2_identity_pool store.mongo.host MongoDB server hostname, if using a MongoDB store. str - store.mongo.port Port to use, if using a MongoDB store. int 27017 store.mongo.username Username for authentication, if using a MongoDB store. str - store.mongo.password Password for authentication, if using a MongoDB store. str - store.mongo.tls TLS mode, if using a MongoDB store. bool true store.mongo.replica_set Cosmos DB Replica Set, if using a Cosmos DB store. str - store.mongo.database Database name, if using a Cosmos DB store. str scim2Db store.mongo.dsn Cosmos DB DSN, ignoring all other connection params (except store.mongo.database ) str - authentication.secret Plain secret bearer token str - authentication.akv.vault_name AKV name, if bearer token is stored in AKV. str - authentication.akv.secret_name AKV secret name, if bearer token is stored in AKV. str scim-2-api-token authentication.akv.credentials_client Credentials client type, if bearer token is stored in AKV. str default authentication.akv.force_create Try to create an AKV secret on startup, if bearer token to be stored in AKV. bool false","title":"Configuration Reference"},{"location":"getting-started/","text":"Getting Started Pull the Container Image The Keystone image is hosted on GHCR (GitHub Container Registry). To pull its latest version locally, run the following docker command: docker pull ghcr.io/keystone-scim/keystone:latest For a full image versions list, refer to the package information on GitHub . Where to Run Keystone You can run Keystone in pretty much any container runtime environment. Keystone is entirely stateless, so you can deploy anywhere from a single Docker container to replicated Kubernetes Deployment (see Kubernetes example in Keystone 's GitHub repo). Ready to run it? Head over to the Configuration Guide .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#pull-the-container-image","text":"The Keystone image is hosted on GHCR (GitHub Container Registry). To pull its latest version locally, run the following docker command: docker pull ghcr.io/keystone-scim/keystone:latest For a full image versions list, refer to the package information on GitHub .","title":"Pull the Container Image"},{"location":"getting-started/#where-to-run-keystone","text":"You can run Keystone in pretty much any container runtime environment. Keystone is entirely stateless, so you can deploy anywhere from a single Docker container to replicated Kubernetes Deployment (see Kubernetes example in Keystone 's GitHub repo). Ready to run it? Head over to the Configuration Guide .","title":"Where to Run Keystone"},{"location":"mongodb/","text":"MongoDB Store Overview You can configure Keystone to point to a MongoDB instance, wherever it may reside. Keystone will attempt to create its MongoDB database and collections upon startup if they do not yet exist. Please read further to learn how to configure Keystone with a MongoDB store. Prerequisites You'll need to ensure the following criteria are met: MongoDB 3.6 or higher : Keystone makes use of MongoDB features available in MongoDB version 3.6 or higher (e.g., collations for case-insensitive comparison, lookups, etc.). Permissions for workload user : the user running the workload will have to have sufficient permissions to create a database and collections in the MongoDB instance. Example The following YAML file and environment variables is a valid way to configure Keystone to point to your MongoDB instance as its data store. Create a file and call it keystone_config.yaml store : mongo : host : my.mongodb.server.com port : 27017 username : keystoneapiuser database : scim2Db tls : true Run the container, while bind-mounting the configuration file as a volume, along with environment variables for secrets: docker run -it \\ -p 5001 :5001 \\ --mount type = bind,source = \" $( pwd ) \" /keystone_config.yaml,target = /etc/keystone_config.yaml -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e STORE_MONGO_PASSWORD = \"<extra secret mongo password>\" \\ -e CONFIG_PATH = /etc/keystone_config.yaml ghcr.io/keystone-scim/keystone:latest Alternatively, you can configure Keystone with a MongoDB DSN. Notice that the this example skips the YAML configuration file altogether: DSN = \"mongodb://user:<mongosecret>@mongohost1,mongohost2:27017/?tls=true&replicaSet=myReplicaSet\" docker run -it \\ -p 5001 :5001 \\ -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e STORE_MONGO_DSN = ${ DSN } \\ ghcr.io/keystone-scim/keystone:latest","title":"MongoDB Store"},{"location":"mongodb/#mongodb-store","text":"","title":"MongoDB Store"},{"location":"mongodb/#overview","text":"You can configure Keystone to point to a MongoDB instance, wherever it may reside. Keystone will attempt to create its MongoDB database and collections upon startup if they do not yet exist. Please read further to learn how to configure Keystone with a MongoDB store.","title":"Overview"},{"location":"mongodb/#prerequisites","text":"You'll need to ensure the following criteria are met: MongoDB 3.6 or higher : Keystone makes use of MongoDB features available in MongoDB version 3.6 or higher (e.g., collations for case-insensitive comparison, lookups, etc.). Permissions for workload user : the user running the workload will have to have sufficient permissions to create a database and collections in the MongoDB instance.","title":"Prerequisites"},{"location":"mongodb/#example","text":"The following YAML file and environment variables is a valid way to configure Keystone to point to your MongoDB instance as its data store. Create a file and call it keystone_config.yaml store : mongo : host : my.mongodb.server.com port : 27017 username : keystoneapiuser database : scim2Db tls : true Run the container, while bind-mounting the configuration file as a volume, along with environment variables for secrets: docker run -it \\ -p 5001 :5001 \\ --mount type = bind,source = \" $( pwd ) \" /keystone_config.yaml,target = /etc/keystone_config.yaml -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e STORE_MONGO_PASSWORD = \"<extra secret mongo password>\" \\ -e CONFIG_PATH = /etc/keystone_config.yaml ghcr.io/keystone-scim/keystone:latest Alternatively, you can configure Keystone with a MongoDB DSN. Notice that the this example skips the YAML configuration file altogether: DSN = \"mongodb://user:<mongosecret>@mongohost1,mongohost2:27017/?tls=true&replicaSet=myReplicaSet\" docker run -it \\ -p 5001 :5001 \\ -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e STORE_MONGO_DSN = ${ DSN } \\ ghcr.io/keystone-scim/keystone:latest","title":"Example"},{"location":"mysql/","text":"MySQL Store Overview You can configure Keystone to point to a MySQL server, wherever it may reside. Keystone will attempt to create its tables and indeces upon startup if they do not yet exist. Please read further to learn how to configure Keystone with a MySQL server. Prerequisites You'll need to ensure the following criteria are met: MySQL 5.7.8 or higher : Keystone makes use of MySQL features available in MySQL version 5.7.8 or higher (e.g., JSON object type). If you can, use the latest stable version of MySQL. Permissions for workload user : the user running the workload will have to own the database object Keystone is configured to run in. Keystone will not try to create the database object. Example The following YAML file and environment variables is a valid way to configure Keystone to point to your MySQL database as its data store. Create a file and call it keystone_config.yaml store : mysql : host : mysql.server.com port : 3306 username : keystoneuser database : mysql ssl : require Run the container, while bind-mounting the configuration file as a volume, along with environment variables for secrets: docker run -it \\ -p 5001 :5001 \\ --mount type = bind,source = \" $( pwd ) \" /keystone_config.yaml,target = /etc/keystone_config.yaml -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e STORE_MYSQL_PASSWORD = \"<extra secret mysql password>\" \\ -e CONFIG_PATH = /etc/keystone_config.yaml ghcr.io/keystone-scim/keystone:latest","title":"MySQL Store"},{"location":"mysql/#mysql-store","text":"","title":"MySQL Store"},{"location":"mysql/#overview","text":"You can configure Keystone to point to a MySQL server, wherever it may reside. Keystone will attempt to create its tables and indeces upon startup if they do not yet exist. Please read further to learn how to configure Keystone with a MySQL server.","title":"Overview"},{"location":"mysql/#prerequisites","text":"You'll need to ensure the following criteria are met: MySQL 5.7.8 or higher : Keystone makes use of MySQL features available in MySQL version 5.7.8 or higher (e.g., JSON object type). If you can, use the latest stable version of MySQL. Permissions for workload user : the user running the workload will have to own the database object Keystone is configured to run in. Keystone will not try to create the database object.","title":"Prerequisites"},{"location":"mysql/#example","text":"The following YAML file and environment variables is a valid way to configure Keystone to point to your MySQL database as its data store. Create a file and call it keystone_config.yaml store : mysql : host : mysql.server.com port : 3306 username : keystoneuser database : mysql ssl : require Run the container, while bind-mounting the configuration file as a volume, along with environment variables for secrets: docker run -it \\ -p 5001 :5001 \\ --mount type = bind,source = \" $( pwd ) \" /keystone_config.yaml,target = /etc/keystone_config.yaml -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e STORE_MYSQL_PASSWORD = \"<extra secret mysql password>\" \\ -e CONFIG_PATH = /etc/keystone_config.yaml ghcr.io/keystone-scim/keystone:latest","title":"Example"},{"location":"postgresql/","text":"PostgreSQL Store Overview You can configure Keystone to point to a PostgreSQL server, wherever it may reside. Keystone will attempt to create its database objects upon startup if they do not yet exist. Please read further to learn how to configure Keystone with a PostgreSQL server. Prerequisites You'll need to ensure the following criteria are met: PostgreSQL 10 or higher : Keystone makes use of PostgreSQL features available in PostgreSQL version 10 or higher (e.g., ILIKE comparisons and the CITEXT extension). The ability to install the CITEXT extension : Some managed database services (such as Azure Database for PostgreSQL - Flexible Server ) require adminsitrators to allow certain extensions explicitly. Check that your PostgreSQL instance allows the creation of the CITEXT extension. Permissions for workload user : the user running the workload will have to own the schema Keystone is configured to run in. If the schema doesn't exist, Keystone will try to create a schema under that name. Example The following YAML file and environment variables is a valid way to configure Keystone to point to your PostgreSQL database as its data store. Create a file and call it keystone_config.yaml store : pg : host : my.postgresql.server.com port : 5432 username : keystone_api_user database : scim_2_db schema : public ssl_mode : require Run the container, while bind-mounting the configuration file as a volume, along with environment variables for secrets: docker run -it \\ -p 5001 :5001 \\ --mount type = bind,source = \" $( pwd ) \" /keystone_config.yaml,target = /etc/keystone_config.yaml -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e STORE_PG_PASSWORD = \"<extra secret postgres password>\" \\ -e CONFIG_PATH = /etc/keystone_config.yaml ghcr.io/keystone-scim/keystone:latest","title":"PostgerSQL Store"},{"location":"postgresql/#postgresql-store","text":"","title":"PostgreSQL Store"},{"location":"postgresql/#overview","text":"You can configure Keystone to point to a PostgreSQL server, wherever it may reside. Keystone will attempt to create its database objects upon startup if they do not yet exist. Please read further to learn how to configure Keystone with a PostgreSQL server.","title":"Overview"},{"location":"postgresql/#prerequisites","text":"You'll need to ensure the following criteria are met: PostgreSQL 10 or higher : Keystone makes use of PostgreSQL features available in PostgreSQL version 10 or higher (e.g., ILIKE comparisons and the CITEXT extension). The ability to install the CITEXT extension : Some managed database services (such as Azure Database for PostgreSQL - Flexible Server ) require adminsitrators to allow certain extensions explicitly. Check that your PostgreSQL instance allows the creation of the CITEXT extension. Permissions for workload user : the user running the workload will have to own the schema Keystone is configured to run in. If the schema doesn't exist, Keystone will try to create a schema under that name.","title":"Prerequisites"},{"location":"postgresql/#example","text":"The following YAML file and environment variables is a valid way to configure Keystone to point to your PostgreSQL database as its data store. Create a file and call it keystone_config.yaml store : pg : host : my.postgresql.server.com port : 5432 username : keystone_api_user database : scim_2_db schema : public ssl_mode : require Run the container, while bind-mounting the configuration file as a volume, along with environment variables for secrets: docker run -it \\ -p 5001 :5001 \\ --mount type = bind,source = \" $( pwd ) \" /keystone_config.yaml,target = /etc/keystone_config.yaml -e AUTHENTICATION_SECRET = \"<extra secret bearer token>\" \\ -e STORE_PG_PASSWORD = \"<extra secret postgres password>\" \\ -e CONFIG_PATH = /etc/keystone_config.yaml ghcr.io/keystone-scim/keystone:latest","title":"Example"}]}